#N canvas 520 43 504 610 10;
#X obj 1 0 cnv 15 500 30 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#X text 328 577 see also:;
#X text 8 7 netpd_text - netpd version of [text];
#X text 23 431 [netpd_text] is a wrapper around Pd's [text] class and
keeps instances among clients in sync. Although it tries to provide
an interface as similar as possible to the original \, some difference
in behavior need to consider: All modifications happen asynchronously
because they're sent through the network.;
#X obj 27 400 print netpd_text.out;
#X obj 294 400 print netpd_text.status;
#X obj 393 576 text;
#X obj 160 400 print netpd_text.type;
#X obj 425 576 netpd_head;
#N canvas 611 82 436 282 set 0;
#X msg 37 73 set 2 -1 another line;
#X msg 44 104 set 3 2 part of another line;
#X msg 27 43 set 1e+06 -1 this is a new line;
#X text 218 72 <- replace whole line;
#X text 223 103 <- replace part of line;
#X obj 27 155 outlet;
#X text 231 40 <- append a line;
#X text 26 193 NOTE:;
#X text 26 212 Do not use [text set] because this would bypass synchronisation
and would apply modifications only locally.;
#X connect 0 0 5 0;
#X connect 1 0 5 0;
#X connect 2 0 5 0;
#X restore 48 78 pd set;
#N canvas 913 120 488 421 get 0;
#X floatatom 35 15 5 0 0 0 - - - 0;
#X msg 35 38 get \$1;
#X msg 43 69 get 4 2;
#X text 84 39 <- get whole line;
#X text 96 69 <- get specific element of line;
#X msg 50 100 get 4 1 2;
#X text 118 100 <- get section of line;
#X obj 35 153 outlet;
#X listbox 32 336 47 0 0 0 - - - 0;
#X obj 32 255 unpack f f f;
#X text 25 196 This is equivalent:;
#X obj 32 307 text get 999-text1;
#X msg 32 232 4 1 3;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 7 0;
#X connect 5 0 7 0;
#X connect 9 0 11 0;
#X connect 9 1 11 1;
#X connect 9 2 11 2;
#X connect 11 0 8 0;
#X connect 12 0 9 0;
#X restore 60 104 pd get;
#N canvas 857 127 409 218 delete 0;
#X msg 22 30 delete \$1;
#X floatatom 22 10 5 0 0 0 - - - 0;
#X text 87 30 <- delete specific line;
#X msg 39 62 delete -1;
#X text 103 61 <- delete whole text;
#X obj 22 93 outlet;
#X text 26 136 NOTE:;
#X text 26 153 Do not use [text delete] because this bypasses synchronisation
and applies modifications only locally.;
#X connect 0 0 5 0;
#X connect 1 0 0 0;
#X connect 3 0 5 0;
#X restore 91 165 pd delete;
#N canvas 923 85 433 303 size 0;
#X msg 34 24 size;
#X msg 48 52 size 2;
#X text 72 23 <- get number of lines;
#X text 98 52 <- get number of elements of specific line;
#X obj 34 131 outlet;
#X floatatom 32 264 5 0 0 0 - - - 0;
#X msg 32 206 bang;
#X msg 74 207 2;
#X text 30 172 This is equivalent:;
#X obj 32 241 text size 999-text1;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 6 0 9 0;
#X connect 7 0 9 0;
#X connect 9 0 5 0;
#X restore 107 194 pd size;
#N canvas 957 79 477 339 tolist/fromlist 0;
#X msg 25 27 tolist;
#X text 72 25 <- output whole text as a list;
#X msg 51 182 fromlist this is a message \\\; this is another 1 ...
\\\;;
#X obj 25 280 outlet;
#X text 37 52 This is equivalent:;
#X msg 47 77 bang;
#X obj 47 100 text tolist 999-text1;
#X text 50 162 set text from list:;
#X obj 47 123 print;
#X text 60 218 NOTE:;
#X text 62 236 Do not use [text fromlist] since it will modify the
text only locally.;
#X connect 0 0 3 0;
#X connect 2 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X restore 122 226 pd tolist/fromlist;
#X obj 27 357 netpd_text 999 text1, f 45;
#N canvas 927 118 456 199 insert 0;
#X msg 13 25 insert 2 this wants to go in between;
#X text 236 23 <- first arg is line no;
#X obj 13 60 outlet;
#X text 18 101 NOTE:;
#X text 18 118 Do not use [text insert] because this bypasses synchronisation
and applies modifications only locally.;
#X connect 0 0 2 0;
#X restore 74 136 pd insert;
#N canvas 927 118 444 224 append 0;
#X obj 12 69 outlet;
#X msg 12 31 append this will always be appended at the end;
#X text 13 9 append line to text buffer;
#X text 12 102 There is no 'append' subclass in [text]. This was added
for convenience.;
#X connect 1 0 0 0;
#X restore 137 261 pd append;
#N canvas 958 150 464 280 click/close 0;
#X obj 22 254 outlet;
#X text 15 10 These are methods from the [text define] subclass;
#X msg 22 50 click;
#X text 67 51 show the text buffer window;
#X msg 52 80 close;
#X text 97 81 hide the text buffer window;
#X text 67 125 NOTE:;
#X text 66 142 You can also manually edit the text buffer in the window.
When you save the content by hitting 'Ctrl-s' \, the buffer is synchronized
with peers. You could use this as poor man's etherpad replacement.
;
#X connect 2 0 0 0;
#X connect 4 0 0 0;
#X restore 174 327 pd click/close;
#N canvas 958 150 563 280 read/write/sort/clear 0;
#X obj 22 221 outlet;
#X text 15 10 These are methods from the [text define] subclass;
#X obj 22 75 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X obj 22 95 openpanel;
#X msg 22 118 read \$1;
#X obj 142 75 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X obj 142 95 savepanel;
#X msg 142 118 write \$1;
#X text 19 53 read from file;
#X text 139 53 write to file;
#X msg 262 118 sort;
#X text 259 53 sort lines of the text buffer:;
#X msg 372 118 clear;
#X text 371 92 clear the whole buffer:;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 0 0;
#X connect 10 0 0 0;
#X connect 12 0 0 0;
#X restore 154 294 pd read/write/sort/clear;
#X text 26 524 NOTE:;
#X text 26 538 Replace 999 by \$1 when using [netpd_text] in your instrument.
;
#X text 297 129 arg1: \$1;
#X text 297 149 arg2: name of the text buffer;
#X msg 27 48 click;
#X text 70 48 show the buffer \, so we see its content;
#X obj 341 48 netpd_head 999 netpd_text;
#X connect 9 0 14 0;
#X connect 10 0 14 0;
#X connect 11 0 14 0;
#X connect 12 0 14 0;
#X connect 13 0 14 0;
#X connect 14 0 4 0;
#X connect 14 1 7 0;
#X connect 14 2 5 0;
#X connect 15 0 14 0;
#X connect 16 0 14 0;
#X connect 17 0 14 0;
#X connect 18 0 14 0;
#X connect 23 0 14 0;
